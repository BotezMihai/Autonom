from .models import User, Token


config = {
    'jwt_secret': 'super-secret-key-please-change',
    'token_expiration_seconds': 3600,
    'token_refresh_seconds': 1000,
    'jwt_algorithm': 'HS256'
}


def add_user(username, password, email):
    """Inserts new user to the database. Use for register purposes."""
    user = User(username, hash(password), email, [], [])
    user.put()


def exists_user(email, password):
    """Verify if the user exists in the datastore"""
    query = User.query()
    query.add_filter('email', '=', email)
    query_it = query.fetch()
    for ent in query_it:
        if ent is None:
            return False
        elif check_password(ent.password, password):  
            return True
    return False


def hash_password(password):
    """Encode password"""
    salt = uuid.uuid4().hex
    return hashlib.sha256(salt.encode() + password.encode()).hexdigest() + ':' + salt


def check_password(hashed_password, user_password):
    """Check if password stored matches the given one"""
    password, salt = hashed_password.split(':')
    return password == hashlib.sha256(salt.encode() + user_password.encode()).hexdigest()


def generate_token(user):
    """Generates token encoding user urlsafe and time"""

    payload = {
        'user_url': user.urlsafe,
        'exp': datetime.utcnow() + timedelta(seconds=config['token_expiration_seconds'])
    }
    return jwt.encode(payload, config['jwt_secret'], config['jwt_algorithm'])


def exists_token(token):
    """Checks whether the token exists in the database."""

    query = Token.query()
    query.add_filter('token', '=', token)
    query_list = list(query.fetch())

    if query_list:
        for token_entity in query_list:
            if token_entity:
                return True
    return False


def verify_token(authorization):
    """Checks if given token is valid"""
    try:
        token = authorization.split(' ')[1]
        decoding = jwt.decode(token, config['jwt_secret'], config['jwt_algorithm'])
        if not exists_token(token):
            return None

        return decoding['user_url']

    except jwt.InvalidTokenError:
        return None



